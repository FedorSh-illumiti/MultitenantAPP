{"version":3,"file":"pgUtils.js","sourceRoot":"","sources":["../../src/utils/pgUtils.ts"],"names":[],"mappings":";;;AAAA,MAAM,EAAE,IAAI,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;AAC/B,gDAA+C;AAExC,MAAM,YAAY,GAAG,KAAK,IAAI,EAAE;IACnC,MAAM,MAAM,GAAG,IAAA,qBAAU,GAAE,CAAC;IAE5B,6BAA6B;IAC7B,uBAAuB;IACvB,yBAAyB;IACzB,6BAA6B;IAC7B,mBAAmB;IAEnB,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC;QAClB,IAAI,EAAE,MAAM,CAAC,GAAG;QAChB,IAAI,EAAE,MAAM,CAAC,IAAI;QACjB,QAAQ,EAAE,MAAM,CAAC,QAAQ;QACzB,QAAQ,EAAE,MAAM,CAAC,QAAQ;QACzB,IAAI,EAAE,MAAM,CAAC,IAAI;QACjB,aAAa;QACb,cAAc,EAAE;YACZ,GAAG,EAAE,EAAE,kBAAkB,EAAE,KAAK,EAAE;SACrC;KACJ,CAAC,CAAC;IACH,OAAO,MAAM,IAAI,CAAC,OAAO,EAAE,CAAC;AAChC,CAAC,CAAC;AArBW,QAAA,YAAY,gBAqBvB;AAEK,MAAM,MAAM,GAAG,KAAK,EAAE,KAAa,EAAE,EAAE;IAC1C,MAAM,UAAU,GAAG,MAAM,IAAA,oBAAY,GAAE,CAAC;IACxC,MAAM,GAAG,GAAG,MAAM,UAAU,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IAC1C,OAAO,GAAG,CAAC;AACf,CAAC,CAAC;AAJW,QAAA,MAAM,UAIjB;AAEK,MAAM,YAAY,GAAG,KAAK,EAAE,MAAc,EAAE,EAAE;IACjD,OAAO,MAAM,IAAA,cAAM,EAAC,+BAA+B,MAAM,GAAG,CAAC,CAAC;AAClE,CAAC,CAAC;AAFW,QAAA,YAAY,gBAEvB","sourcesContent":["const { Pool } = require(\"pg\");\nimport { getDBCreds } from \"../utils/envUtils\";\n\nexport const getSQLClient = async () => {\n    const dbConn = getDBCreds();\n\n    // database: dbConn.database,\n    // dialect: 'postgres',\n    // username: dbConn.user,\n    // password: dbConn.password,\n    // host:dbConn.url,\n\n    const pool = new Pool({\n        host: dbConn.url,\n        user: dbConn.user,\n        password: dbConn.password,\n        database: dbConn.database,\n        port: dbConn.port,\n        // ssl: true,\n        dialectOptions: {\n            ssl: { rejectUnauthorized: false }\n        }\n    });\n    return await pool.connect();\n};\n\nexport const runSQL = async (query: string) => {\n    const connection = await getSQLClient();\n    const res = await connection.query(query);\n    return res;\n};\n\nexport const createSchema = async (schema: string) => {\n    return await runSQL(`CREATE SCHEMA IF NOT EXISTS ${schema};`);\n};\n"]}