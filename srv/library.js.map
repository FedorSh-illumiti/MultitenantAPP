{"version":3,"file":"library.js","sourceRoot":"","sources":["../src/library.ts"],"names":[],"mappings":"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","sourcesContent":["\nimport cfenv from \"cfenv\";\nimport httpClient from \"@sap-cloud-sdk/http-client\";\nconst appEnv = cfenv.getAppEnv();\nconst LOG = cds.log('sql')\n\n\n\nconst getSubscriptions = async (registry) => {\n    try {\n        // get subscriptions\n        let res = await httpClient.executeHttpRequest({ destinationName: 'app-registry' }, {\n            method: 'GET',\n            url: '/saas-manager/v1/application/subscriptions'\n        });\n        return res.data;\n    } catch (err) {\n        LOG.info(err.stack);\n        return err.message;\n    }\n};\n\nconst getCFInfo = async (appname) => {\n    try {\n        // get app GUID\n        let res1 = await httpClient.executeHttpRequest({ destinationName: 'app-cfapi' }, {\n            method: 'GET',\n            url: '/v3/apps?organization_guids=' + appEnv.app.organization_id + '&space_guids=' + appEnv.app.space_id + '&names=' + appname\n        });\n        // get domain GUID\n        let res2 = await httpClient.executeHttpRequest({ destinationName: 'app-cfapi' }, {\n            method: 'GET',\n            url: '/v3/domains?names=' + /\\.(.*)/gm.exec(appEnv.app.application_uris[0])[1]\n        });\n        let results = {\n            'app_id': res1.data.resources[0].guid,\n            'domain_id': res2.data.resources[0].guid\n        };\n        return results;\n    } catch (err) {\n        LOG.info(err.stack);\n        return err.message;\n    }\n};\n\nconst createRoute = async (subscribedSubdomain, appname) => {\n    getCFInfo(appname).then(\n        async function (CFInfo) {\n            try {\n                // create route\n                let res1 = await httpClient.executeHttpRequest({ destinationName: 'app-cfapi' }, {\n                    method: 'POST',\n                    url: '/v3/routes',\n                    data: {\n                        'host': subscribedSubdomain + '-' + process.env.APP_URI.split('.')[0],\n                        'relationships': {\n                            'space': {\n                                'data': {\n                                    'guid': appEnv.app.space_id\n                                }\n                            },\n                            'domain': {\n                                'data': {\n                                    'guid': CFInfo.domain_id\n                                }\n                            }\n                        }\n                    },\n                });\n                // map route to app\n                let res2 = await httpClient.executeHttpRequest({ destinationName: 'app-cfapi' }, {\n                    method: 'POST',\n                    url: '/v3/routes/' + res1.data.guid + '/destinations',\n                    data: {\n                        'destinations': [{\n                            'app': {\n                                'guid': CFInfo.app_id\n                            }\n                        }]\n                    },\n                });\n                LOG.info('Route created for ' + subscribedSubdomain);\n                return res2.data;\n            } catch (err) {\n                LOG.error(err.stack);\n                return err.message;\n            }\n        },\n        function (err) {\n            LOG.error(err.stack);\n            return err.message;\n        });\n};\n\nconst deleteRoute = async (subscribedSubdomain, appname) => {\n    getCFInfo(appname).then(\n        async function (CFInfo) {\n            try {\n                // get route id\n                let res1 = await httpClient.executeHttpRequest({ destinationName: 'app-cfapi' }, {\n                    method: 'GET',\n                    url: '/v3/apps/' + CFInfo.app_id + '/routes?hosts=' + subscribedSubdomain + '-' + process.env.APP_URI.split('.')[0]\n                });\n                if (res1.data.pagination.total_results === 1) {\n                    try {\n                        // delete route\n                        let res2 = await httpClient.executeHttpRequest({ destinationName: 'app-cfapi' }, {\n                            method: 'DELETE',\n                            url: '/v3/routes/' + res1.data.resources[0].guid\n                        });\n                        LOG.info('Route deleted for ' + subscribedSubdomain);\n                        return res2.data;\n                    } catch (err) {\n                        LOG.error(err.stack);\n                        return err.message;\n                    }\n                } else {\n                    let errmsg = { 'error': 'Route not found' };\n                    LOG.error(errmsg);\n                    return errmsg;\n                }\n            } catch (err) {\n                LOG.error(err.stack);\n                return err.message;\n            }\n        },\n        function (err) {\n            LOG.error(err.stack);\n            return err.message;\n        });\n};\n\nexport default {getSubscriptions,deleteRoute, createRoute, getCFInfo}\n\n\n\n\n"]}