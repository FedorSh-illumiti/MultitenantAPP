{"version":3,"file":"publicCloud.js","sourceRoot":"","sources":["../../src/handlers/publicCloud.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,wEAA4D;AAC5D,6DAA6D;AAC7D,aAAa;AACb,oDAAiD;AACjD,iEAAgD;AAChD,mDAA2B;AAC3B,8DAA0D;AAC1D,8DAA6F;AAE7F,MAAM,GAAG,GAAG,aAAG,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;AAE3B,MAAM,WAAW;IACb,gBAAe,CAAC;IAEhB,KAAK,CAAC,MAAM,CAAI,GAAQ;QACpB,MAAM,IAAA,gBAAa,EAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QAEhC,IAAI,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,EAAE;YACrC,qBAAqB;YAErB,kEAAkE;YAClE,MAAM,GAAG,GAAG,IAAA,0BAAW,EAAC,GAAG,CAAC,CAAC;YAC7B,QAAQ;YACR,oEAAoE;YACpE,eAAe;YAEf,SAAS;YACT,gBAAgB;YAChB,oBAAoB;YACpB,gBAAgB;YAChB,IAAI;YAEJ,MAAM,KAAK,GAAG,MAAM,IAAA,6BAAc,EAAC;gBAC/B,eAAe,EAAE,cAAc;gBAC/B,GAAG;gBACH,iBAAiB,EAAE,6CAA8B,CAAC,cAAc;aACnE,CAAC,CAAC;YACH,6BAA6B;YAC7B,0DAA0D;YAC1D,YAAY;YACZ,uEAAuE;YACvE,aAAa;YACb,uCAAuC;YACvC,0EAA0E;YAC1E,4BAA4B;YAE5B,MAAM;YACN,iCAAiC;YAEjC,MAAM,aAAa,GAAG,MAAM,IAAA,mBAAQ,GAAE,CAAC;YAEvC,IAAI;gBACA,MAAM,aAAa,CAAC,MAAM,CAAC;oBACvB,aAAa;oBACb,YAAY,EAAE,KAAK;oBACnB,UAAU,EAAE,IAAI;iBACnB,CAAC,CAAC;aACN;YAAC,OAAO,KAAK,EAAE;gBACZ,GAAG,CAAC,KAAK,CAAC,QAAQ,EAAE,KAAK,CAAC,OAAO,CAAC,CAAC;aACtC;YAED,gBAAgB;YAChB,iBAAiB;YACjB,gDAAgD;YAChD,aAAa;YAEb,QAAQ;YAER,oBAAoB;YACpB,gBAAgB;YAChB,IAAI;YACJ,MAAM,IAAI,uBAAQ,CAAC,wBAAQ,CAAC,GAAG,EAAE,wBAAwB,CAAC,CAAC;SAC9D;aAAM,IAAI,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,EAAE;YACzC,IAAI;gBACA,MAAM,UAAU,GAAG,MAAM,aAAG,CAAC,OAAO,CAAC,EAAE,CAAC,iCAAiC,CAAC,CAAC;gBAC3E,MAAM,GAAG,GAAG,MAAM,UAAU,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;gBAC5C,OAAO,MAAM,UAAU,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;gBAEvC,uDAAuD;gBACvD,2FAA2F;gBAC3F,wBAAwB;gBACxB,2CAA2C;gBAC3C,4BAA4B;gBAC5B,SAAS;gBAET,aAAa;gBACb,eAAe;gBACf,sBAAsB;gBACtB,OAAO;gBACP,YAAY;aACf;YAAC,OAAO,KAAK,EAAE;gBACZ,QAAQ,CAAC;aACZ;SACJ;IACL,CAAC;CACJ;AAED,kBAAe,WAAW,CAAC","sourcesContent":["import LocCache from \"../utils/cache\";\nimport { IRequest } from \"../system\";\nimport ErrorHnd, { MsgTypes } from \"../utils/errorHandling\";\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nimport { getModel } from \"../db/models/employee\";\nimport getConnection from \"../db/config/config\";\nimport cds from \"@sap/cds\";\nimport { retrieveJwt } from \"@sap-cloud-sdk/connectivity\";\nimport { DestinationSelectionStrategies, getDestination } from \"@sap-cloud-sdk/connectivity\";\n\nconst LOG = cds.log(\"sql\");\n\nclass PublicCloud implements IRequest {\n    constructor() {}\n\n    async handle<T>(req: any): Promise<any> {\n        await getConnection(req.tenant);\n\n        if (req.path.search(\"UserDetails\") > -1) {\n            //calls class handler\n\n            // const { enterpriseProjectApi } = apiEnterpriseProjectSrv0002();\n            const jwt = retrieveJwt(req);\n            // try {\n            //     const res2 = await getAllDestinationsFromDestinationService({\n            //         jwt,\n\n            //     })\n            //     debugger;\n            // } catch (error) {\n            //     debugger;\n            // }\n\n            const resss = await getDestination({\n                destinationName: \"app-s4public\",\n                jwt,\n                selectionStrategy: DestinationSelectionStrategies.alwaysProvider\n            });\n            // console.log('getting!!!');\n            // const res = await enterpriseProjectApi.requestBuilder()\n            // .getAll()\n            // // .addCustomHeaders({ APIKey: 'MFEMoSU30K2sYjeFYkZ3z6fvRdXyqqwH' })\n            // .execute({\n            //     destinationName: 'app-s4public',\n            //     selectionStrategy: DestinationSelectionStrategies.alwaysSubscriber,\n            //     jwt: retrieveJwt(req)\n\n            // });\n            // console.log('result!!!', res);\n\n            const employeeModel = await getModel();\n\n            try {\n                await employeeModel.create({\n                    // id: 'dd1',\n                    employeename: \"xxx\",\n                    employeeid: \"22\"\n                });\n            } catch (error) {\n                LOG.error(\"error:\", error.message);\n            }\n\n            // // @ts-ignore\n            // new Employee({\n            //     id:'b95e3d57-619b-464f-a0fb-9ea63eb8e7a4'\n            // }).save();\n\n            // try {\n\n            // } catch (error) {\n            //     debugger;\n            // }\n            throw new ErrorHnd(MsgTypes.BTP, \"METHOD_NOT_IMPLEMENTED\");\n        } else if (req.path.search(\"Projects\") > -1) {\n            try {\n                const projectAPI = await cds.connect.to(\"API_ENTERPRISE_PROJECT_SRV_0002\");\n                const res = await projectAPI.run(req.query);\n                return await projectAPI.run(req.query);\n\n                // const { A_EnterpriseProject } = projectAPI.entities;\n                // const result = await projectAPI.run(SELECT.from(A_EnterpriseProject).columns(projects=>{\n                //     projects.Project,\n                //     projects.to_EntProjTeamMember(as1=>{\n                //         as1.CreatedByUser\n                //     })\n\n                // }).where({\n                //     Project:\n                //         'ENTPRJFDC'\n                // }));\n                // debugger;\n            } catch (error) {\n                debugger;\n            }\n        }\n    }\n}\n\nexport default PublicCloud;\n"]}