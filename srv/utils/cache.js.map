{"version":3,"file":"cache.js","sourceRoot":"","sources":["../../src/utils/cache.ts"],"names":[],"mappings":";;AAKA,MAAM,QAAQ;IAMV;QACI,IAAI,CAAC,YAAY,GAAG,EAAE,CAAC;IAC3B,CAAC;IAED;;;;;OAKG;IACI,MAAM,CAAC,WAAW;QACrB,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE;YACpB,QAAQ,CAAC,QAAQ,GAAG,IAAI,QAAQ,EAAE,CAAC;SACtC;QAED,OAAO,QAAQ,CAAC,QAAQ,CAAC;IAC7B,CAAC;IAIM,QAAQ,CAAC,EAAC,IAAI,EAAE,KAAK,EAAW;QACnC,cAAc;QACd,MAAM,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,CAAA,EAAE,CAAA,EAAE,CAAC,IAAI,KAAG,IAAI,CAAC,CAAC;QAC/D,IAAI,CAAC,WAAW,EAAC;YACb,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,EAAC,IAAI,EAAE,KAAK,EAAC,CAAC,CAAC;SACzC;aACI;YACD,WAAW,CAAC,KAAK,GAAG,KAAK,CAAC;SAC7B;IACL,CAAC;IAEM,QAAQ,CAAC,IAAW;QACvB,cAAc;QACd,MAAM,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,CAAA,EAAE,CAAA,EAAE,CAAC,IAAI,KAAG,IAAI,CAAC,CAAC;QAE/D,IAAI,WAAW,EAAC;YACZ,OAAO,WAAW,CAAC,KAAK,CAAC;SAC5B;QAED,MAAM,IAAI,KAAK,CAAC,aAAa,IAAI,eAAe,CAAC,CAAC;IAEtD,CAAC;CAGJ;AAED,kBAAe,QAAQ,CAAC","sourcesContent":["type CacheType = {\n    name:string,\n    value:any\n}\n\nclass LocCache {\n\n    private static instance: LocCache;\n\n    private _cacheValues:CacheType[];\n\n    private constructor() { \n        this._cacheValues = [];\n    }\n\n    /**\n     * The static method that controls the access to the singleton instance.\n     *\n     * This implementation let you subclass the Singleton class while keeping\n     * just one instance of each subclass around.\n     */\n    public static getInstance(): LocCache {\n        if (!LocCache.instance) {\n            LocCache.instance = new LocCache();\n        }\n\n        return LocCache.instance;\n    }\n\n\n\n    public setValue({name, value}:CacheType) {\n        //find values \n        const foundValues = this._cacheValues.find(el=>el.name===name);\n        if (!foundValues){\n            this._cacheValues.push({name, value});\n        }\n        else {\n            foundValues.value = value;\n        }\n    }\n    \n    public getValue(name:String) {\n        //find values \n        const foundValues = this._cacheValues.find(el=>el.name===name);\n        \n        if (foundValues){\n            return foundValues.value;\n        }\n\n        throw new Error(`Value for ${name} is not found`);\n\n    }\n\n\n}\n\nexport default LocCache;"]}