{"version":3,"file":"config.js","sourceRoot":"","sources":["../../../src/db/config/config.ts"],"names":[],"mappings":";;AAAA,yCAA+C;AAC/C,mDAAkD;AAClD,iDAAoD;AAEpD,MAAM,MAAM,GAAG,IAAA,qBAAU,GAAE,CAAC;AAC5B,MAAM,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;AAC3B,IAAI,WAAW,CAAC;AAEhB,kBAAe,KAAK,EAAE,QAAiB,EAAsB,EAAE;IAC3D,IAAI,WAAW,EAAE;QACb,OAAO,WAAW,CAAC;KACtB;IAED,MAAM,QAAQ,GAAY;QACtB,QAAQ,EAAE,MAAM,CAAC,QAAQ;QACzB,OAAO,EAAE,UAAU;QACnB,QAAQ,EAAE,MAAM,CAAC,IAAI;QACrB,QAAQ,EAAE,MAAM,CAAC,QAAQ;QACzB,IAAI,EAAE,MAAM,CAAC,GAAG;QAChB,OAAO,EAAE,CAAC,GAAG,GAAG,EAAE,EAAE;YAChB,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QACrB,CAAC;QACD,cAAc,EAAE;YACZ,GAAG,EAAE;gBACD,OAAO,EAAE,IAAI;gBACb,kBAAkB,EAAE,KAAK;aAC5B;SACJ;QACD,IAAI,EAAE;YACF,GAAG,EAAE,CAAC;YACN,GAAG,EAAE,CAAC;YACN,OAAO,EAAE,KAAK;YACd,IAAI,EAAE,KAAK;SACd;QACD,OAAO,EAAE,UAAU;QACnB,4CAA4C;KAC/C,CAAC;IACF,IAAI,QAAQ,EAAE;QACV,QAAQ,CAAC,MAAM,GAAG,IAAA,uBAAa,EAAC,QAAQ,CAAC,CAAC;KAC7C;IAED,MAAM,SAAS,GAAG,IAAI,qBAAS,CAAC,QAAQ,CAAC,CAAC;IAC1C,WAAW,GAAG,SAAS,CAAC;IAExB,OAAO,SAAS,CAAC;AACrB,CAAC,CAAC","sourcesContent":["import { Options, Sequelize } from \"sequelize\";\nimport { getDBCreds } from \"../../utils/envUtils\";\nimport { getSchemaName } from \"../../utils/dbUtils\";\n\nconst dbConn = getDBCreds();\nconst LOG = cds.log(\"sql\");\nlet _connection;\n\nexport default async (tenantID?: string): Promise<Sequelize> => {\n    if (_connection) {\n        return _connection;\n    }\n\n    const settings: Options = {\n        database: dbConn.database,\n        dialect: \"postgres\",\n        username: dbConn.user,\n        password: dbConn.password,\n        host: dbConn.url,\n        logging: (...msg) => {\n            LOG.info(msg[0]);\n        },\n        dialectOptions: {\n            ssl: {\n                require: true,\n                rejectUnauthorized: false\n            }\n        },\n        pool: {\n            max: 5,\n            min: 0,\n            acquire: 60000,\n            idle: 10000\n        },\n        storage: \":memory:\"\n        // models: [Employee], // or [Player, Team],\n    };\n    if (tenantID) {\n        settings.schema = getSchemaName(tenantID);\n    }\n\n    const sequelize = new Sequelize(settings);\n    _connection = sequelize;\n\n    return sequelize;\n};\n"]}